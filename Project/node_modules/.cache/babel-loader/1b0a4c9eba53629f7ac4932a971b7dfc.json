{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanja\\\\Desktop\\\\google-forms-master\\\\src\\\\Components\\\\Response\\\\ResponseTab.js\";\nimport React from 'react';\nimport formService from '../../services/formService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nconst rows = [createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Eclair', 262, 16.0, 24, 6.0), createData('Cupcake', 305, 3.7, 67, 4.3), createData('Gingerbread', 356, 16.0, 49, 3.9)];\n\nfunction ResponseTab(props) {\n  const classes = useStyles();\n  const [formData, setFormData] = React.useState({});\n  const [responseData, setResponseData] = React.useState([]);\n  const [questions, setQuestions] = React.useState([]);\n  React.useEffect(() => {\n    if (props.formData) {\n      // console.log(props.formData.questions.length);\n      setQuestions(props.formData.questions);\n      setFormData(props.formData);\n    }\n\n    var formId = props.formId;\n\n    if (formId !== undefined && formId !== \"\") {\n      formService.getResponse(formId).then(data => {\n        //      console.log(data);     \n        setResponseData(data);\n      }, error => {\n        const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        console.log(resMessage);\n      });\n    }\n  }, [props.formId, props.formData]);\n\n  function getSelectedOption(qId, i, j) {\n    var oneResData = responseData[j]; //console.log(oneResData);\n\n    var selectedOp = oneResData.response.filter(qss => qss.questionId === qId);\n    console.log(selectedOp);\n\n    if (selectedOp.length > 0) {\n      var finalOption = questions[i].options.find(oo => oo._id === selectedOp[0].optionId);\n      return finalOption.optionText;\n    } else {\n      return \"not attempted\";\n    } // return selectedOp[0].optionId;\n    //this.students.filter(stud => stud.Class==className);\n\n  } // function getOptionTextById(optionId, questionId, i){\n  // var finalOption = questions[i].options.find(oo => oo._id === optionId);\n  // return finalOption.optionText\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \" Responses\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, \"User\"), questions.map((ques, i) => /*#__PURE__*/React.createElement(TableCell, {\n    key: i,\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 23\n    }\n  }, ques.questionText)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, responseData.map((rs, j) => /*#__PURE__*/React.createElement(TableRow, {\n    key: j,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 23\n    }\n  }, rs.userId), questions.map((ques, i) => /*#__PURE__*/React.createElement(TableCell, {\n    key: i,\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }\n  }, getSelectedOption(ques._id, i, j))))))))));\n}\n\nexport default ResponseTab;\nvar trash = `\n<TableBody>\n                  {rows.map((row) => (\n                    <TableRow key={row.name}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>`;","map":{"version":3,"sources":["C:/Users/sanja/Desktop/google-forms-master/src/Components/Response/ResponseTab.js"],"names":["React","formService","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","ResponseTab","props","classes","formData","setFormData","useState","responseData","setResponseData","questions","setQuestions","useEffect","formId","undefined","getResponse","then","data","error","resMessage","response","message","toString","console","log","getSelectedOption","qId","i","j","oneResData","selectedOp","filter","qss","questionId","length","finalOption","options","find","oo","_id","optionId","optionText","map","ques","questionText","rs","userId","trash"],"mappings":"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","sourcesContent":["import React from 'react'\nimport formService from '../../services/formService';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nfunction ResponseTab(props) {\n  const classes = useStyles();\n\n  const [formData, setFormData] = React.useState({});\n  const [responseData, setResponseData] = React.useState([]);\n  const [questions, setQuestions] = React.useState([]);\n  \n\n    React.useEffect(() => {\n      if(props.formData){\n       // console.log(props.formData.questions.length);\n        setQuestions(props.formData.questions)\n\n        setFormData(props.formData)\n      }\n      var formId = props.formId\n      if(formId !== undefined && formId !== \"\"){\n        formService.getResponse(formId)\n        .then((data) => { \n      //      console.log(data);     \n            setResponseData(data)\n           },\n           error => {\n           const resMessage =\n               (error.response &&\n               error.response.data &&\n               error.response.data.message) ||\n               error.message ||\n               error.toString();\n               console.log(resMessage);\n           }\n       );\n      }\n    },[props.formId, props.formData]);\n\n\n    function getSelectedOption(qId, i, j){\n      var oneResData = responseData[j];\n      //console.log(oneResData);\n      \n      var selectedOp = oneResData.response.filter(qss => qss.questionId === qId);\n     console.log(selectedOp);\n\n      if(selectedOp.length > 0){\n\n        var finalOption = questions[i].options.find(oo => oo._id === selectedOp[0].optionId);\n        return finalOption.optionText\n      } else{\n        return \"not attempted\"\n      }\n\n      \n      // return selectedOp[0].optionId;\n      //this.students.filter(stud => stud.Class==className);\n    }\n\n    // function getOptionTextById(optionId, questionId, i){\n    // var finalOption = questions[i].options.find(oo => oo._id === optionId);\n    // return finalOption.optionText\n    // }\n\n\n  \n  return (\n       <div>\n          <p> Responses</p>\n          <div>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>User</TableCell>\n                    {questions.map((ques, i)=>(\n                      <TableCell key={i} align=\"right\">{ques.questionText}</TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                {/* <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        aanounfdv\n                      </TableCell>\n                      <TableCell align=\"right\">2</TableCell>\n                      <TableCell align=\"right\">no</TableCell>\n                      <TableCell align=\"right\">yes</TableCell>\n                     \n                    </TableRow> */}\n                  {responseData.map((rs, j) => (\n                    <TableRow key={j}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {rs.userId}\n                      </TableCell>\n                      {questions.map((ques, i)=>(\n                      <TableCell key={i} align=\"right\">{getSelectedOption(ques._id, i,j)}</TableCell>\n                    ))}\n                      \n                    </TableRow>\n                  ))}\n                </TableBody>\n                \n              </Table>\n            </TableContainer>\n          </div>\n\n\n\n       </div>\n  );\n}\nexport default ResponseTab\n\n\nvar trash = `\n<TableBody>\n                  {rows.map((row) => (\n                    <TableRow key={row.name}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>`"]},"metadata":{},"sourceType":"module"}