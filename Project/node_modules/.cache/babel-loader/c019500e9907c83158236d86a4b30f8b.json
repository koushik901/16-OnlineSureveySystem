{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport jwt from 'jsonwebtoken';\nconst API_URL = \"http://localhost:5000/api/user/\"; //const API_URL = \"http://192.168.225.23:5000/api/user/\"\n\nexport default {\n  isAuthenticated() {\n    const token = localStorage.getItem('userTicket');\n\n    if (token) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  getGuestUser() {\n    return {\n      name: \"Guest 123\",\n      userId: \"guest123\",\n      email: \"coolboy69@gg.com\"\n    };\n  },\n\n  authenticate(cb) {\n    this.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n\n  signout(cb) {\n    this.isAuthenticated = false;\n    setTimeout(cb, 100);\n  },\n\n  loginWithGoogle(res) {\n    var data = {\n      name: res.profileObj.name,\n      email: res.profileObj.email,\n      image: res.profileObj.imageUrl\n    };\n    return axios.post(API_URL + \"login\", data).then(response => {\n      console.log(response.data);\n\n      if (response.data.accessToken) {\n        localStorage.setItem(\"userTicket\", JSON.stringify(response.data.accessToken));\n      }\n\n      return response.data;\n    });\n  },\n\n  loginAsGuest() {\n    var userData = {\n      name: \"Cool Guest\",\n      id: \"41224d776a326fb40f000001\",\n      email: \"coolboy69@gg.com\"\n    };\n    const accessToken = jwt.sign(userData, \"thisisaguesttokenwithsomeshittystring8\", {\n      expiresIn: '24h'\n    });\n    localStorage.setItem(\"userTicket\", JSON.stringify(accessToken));\n    return accessToken;\n  },\n\n  logout() {\n    localStorage.removeItem(\"userTicket\");\n  },\n\n  getCurrentUser() {\n    return jwtDecode(localStorage.getItem('userTicket'));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/sanja/Desktop/google-forms-master/src/services/authService.js"],"names":["axios","jwtDecode","jwt","API_URL","isAuthenticated","token","localStorage","getItem","getGuestUser","name","userId","email","authenticate","cb","setTimeout","signout","loginWithGoogle","res","data","profileObj","image","imageUrl","post","then","response","console","log","accessToken","setItem","JSON","stringify","loginAsGuest","userData","id","sign","expiresIn","logout","removeItem","getCurrentUser"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,MAAMC,OAAO,GAAG,iCAAhB,C,CACA;;AAIA,eAAiB;AAEbC,EAAAA,eAAe,GAAG;AAChB,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;;AACE,QAAIF,KAAJ,EAAW;AACT,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACJ,GATY;;AAWbG,EAAAA,YAAY,GAAE;AACV,WAAO;AAACC,MAAAA,IAAI,EAAE,WAAP;AAAoBC,MAAAA,MAAM,EAAE,UAA5B;AAAwCC,MAAAA,KAAK,EAAE;AAA/C,KAAP;AACH,GAbY;;AAebC,EAAAA,YAAY,CAACC,EAAD,EAAK;AACf,SAAKT,eAAL,GAAuB,IAAvB;AACAU,IAAAA,UAAU,CAACD,EAAD,EAAK,GAAL,CAAV,CAFe,CAEM;AACtB,GAlBY;;AAoBbE,EAAAA,OAAO,CAACF,EAAD,EAAK;AACV,SAAKT,eAAL,GAAuB,KAAvB;AACAU,IAAAA,UAAU,CAACD,EAAD,EAAK,GAAL,CAAV;AACD,GAvBY;;AA0BbG,EAAAA,eAAe,CAACC,GAAD,EAAM;AACnB,QAAIC,IAAI,GAAG;AACTT,MAAAA,IAAI,EAAEQ,GAAG,CAACE,UAAJ,CAAeV,IADZ;AAETE,MAAAA,KAAK,EAAGM,GAAG,CAACE,UAAJ,CAAeR,KAFd;AAGTS,MAAAA,KAAK,EAAEH,GAAG,CAACE,UAAJ,CAAeE;AAHb,KAAX;AAMA,WAAOrB,KAAK,CACTsB,IADI,CACCnB,OAAO,GAAG,OADX,EACoBe,IADpB,EAEJK,IAFI,CAECC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACN,IAArB;;AACA,UAAIM,QAAQ,CAACN,IAAT,CAAcS,WAAlB,EAA+B;AAC7BrB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACN,IAAT,CAAcS,WAA7B,CAAnC;AACD;;AACD,aAAOH,QAAQ,CAACN,IAAhB;AACD,KARI,CAAP;AASD,GA1CY;;AA4Cba,EAAAA,YAAY,GAAE;AACZ,QAAIC,QAAQ,GAAG;AACbvB,MAAAA,IAAI,EAAE,YADO;AAEXwB,MAAAA,EAAE,EAAE,0BAFO;AAGbtB,MAAAA,KAAK,EAAE;AAHM,KAAf;AAMA,UAAMgB,WAAW,GAAGzB,GAAG,CAACgC,IAAJ,CAASF,QAAT,EAAmB,wCAAnB,EAA6D;AAACG,MAAAA,SAAS,EAAE;AAAZ,KAA7D,CAApB;AACA7B,IAAAA,YAAY,CAACsB,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAAnC;AACA,WAAOA,WAAP;AAED,GAvDY;;AAyDbS,EAAAA,MAAM,GAAG;AACP9B,IAAAA,YAAY,CAAC+B,UAAb,CAAwB,YAAxB;AACD,GA3DY;;AA6DbC,EAAAA,cAAc,GAAG;AAEd,WAAOrC,SAAS,CAACK,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAAhB;AACD;;AAhEW,CAAjB","sourcesContent":["\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport jwt from 'jsonwebtoken';\nconst API_URL = \"http://localhost:5000/api/user/\";\n//const API_URL = \"http://192.168.225.23:5000/api/user/\"\n\n\n\nexport default   {\n\n    isAuthenticated() {\n      const token = localStorage.getItem('userTicket')\n        if (token) {\n          return true\n        } else {\n          return false\n        }\n    },\n\n    getGuestUser(){\n        return {name: \"Guest 123\", userId: \"guest123\", email: \"coolboy69@gg.com\"}\n    },\n\n    authenticate(cb) {\n      this.isAuthenticated = true;\n      setTimeout(cb, 100); // fake async\n    },\n\n    signout(cb) {\n      this.isAuthenticated = false;\n      setTimeout(cb, 100);\n    },\n\n\n    loginWithGoogle(res) {\n      var data = {\n        name: res.profileObj.name,\n        email : res.profileObj.email,\n        image: res.profileObj.imageUrl\n      }\n\n      return axios\n        .post(API_URL + \"login\", data)\n        .then(response => {\n          console.log(response.data); \n          if (response.data.accessToken) {\n            localStorage.setItem(\"userTicket\", JSON.stringify(response.data.accessToken));          \n          }\n          return response.data;\n        });\n    },\n\n    loginAsGuest(){\n      var userData = {\n        name: \"Cool Guest\", \n          id: \"41224d776a326fb40f000001\", \n        email: \"coolboy69@gg.com\"\n      }\n\n      const accessToken = jwt.sign(userData, \"thisisaguesttokenwithsomeshittystring8\", {expiresIn: '24h'});\n      localStorage.setItem(\"userTicket\", JSON.stringify(accessToken));   \n      return accessToken;   \n\n    },\n\n    logout() {\n      localStorage.removeItem(\"userTicket\");\n    },\n\n    getCurrentUser() {\n        \n       return jwtDecode(localStorage.getItem('userTicket'));\n     },\n  };"]},"metadata":{},"sourceType":"module"}